// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STANDARD
  ADMIN
}

enum RaceEventType {
  TRAIL
  ROAD
}

model RaceEvent {
  id               String        @id @default(uuid())
  eventName        String
  slug             String        @unique
  type             RaceEventType
  description      String?
  mainImage        String?
  gallery          String[]
  registrationSite String?
  socialMedia      String[]
  tags             String[]
  organizerId      String?
  organizer        Organizer?    @relation(fields: [organizerId], references: [id], onDelete: SetNull)
  races            Race[]
}

model Competition {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  races       Race[]
}

model Organizer {
  id            String      @id @default(uuid())
  name          String
  contactPhone  String?
  contactEmail  String?
  organizerSite String?
  raceEvents    RaceEvent[]
}

model Race {
  id            String       @id @default(uuid())
  raceName      String?
  raceEventId   String
  elevation     Float?
  length        Float
  gpsFile       String?
  startLocation String
  startDateTime DateTime
  endDateTime   DateTime?
  competitionId String?
  raceEvent     RaceEvent    @relation(fields: [raceEventId], references: [id], onDelete: Cascade)
  competition   Competition? @relation(fields: [competitionId], references: [id], onDelete: SetNull)
  timings       Timing[]
}

model Participant {
  id        String   @id @default(uuid())
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  rfidTag   String   @unique
  createdAt DateTime @default(now())
  timings   Timing[]
}

model Checkpoint {
  id        String   @id @default(uuid())
  name      String
  location  String?
  createdAt DateTime @default(now())
  timings   Timing[]
}

model Timing {
  id            String      @id @default(uuid())
  participantId String
  checkpointId  String
  raceId        String
  timestamp     DateTime    @default(now())
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  checkpoint    Checkpoint  @relation(fields: [checkpointId], references: [id], onDelete: Cascade)
  race          Race        @relation(fields: [raceId], references: [id], onDelete: Cascade)
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  password    String
  role        Role         @default(STANDARD)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  participant Participant?
}
